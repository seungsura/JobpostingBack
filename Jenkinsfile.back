pipeline {
    agent any

    environment {
        gitName = 'seungsura'
        gitEmail = 'seungsura@gmail.com'
        gitWebaddress = 'https://github.com/seungsura/JobpostingBack.git'
        gitSshaddress = 'git@github.com:seungsura/JobpostingBack.git'
        gitCredential = 'git_cre'
        dockerHubRegistry = 'harbor.ks.io/test/workspace_backend-server'
        dockerHubRegistryCredential = 'docker_cre'
        dirJobPosting = '/var/lib/jenkins/workspace'
	pipeName = 'Backend7'
    }


    stages {

        stage('checkout Github') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: gitCredential, url: gitWebaddress]]])
                }
                post {
                    failure {
                        echo 'Repository clone failure'
                    }
                    success {
                        echo 'Repository clone success'
                    }
            }
        }    

	stage('DB Permission allow') {
	    steps {
		sh 'chmod 777 ${dirJobPosting}/${pipeName}/mariadb/*'
	    }
	    post {
                failure {
                    echo 'migrate failure'
                }
                success {
                    echo 'migrate success'
                    }
                }
	}
	
        stage('migrate') {
            steps {
                sh '${dirJobPosting}/${pipeName}/manage_migrate.sh'
            }
            post {
                failure {
                    echo 'migrate failure'
                }
                success {
                    echo 'migrate success'
                    }
                }
        }

        stage('collectstatic') {
            steps {
		sh '${dirJobPosting}/${pipeName}/compose_run.sh'	  

            }
            post {
                failure {
                    echo 'collectstatic failure'
                }
                success {
                    echo 'collectstatic success'
                    }
                }
        }

        stage('docker-compose Build') {
            steps {
		sh '${dirJobPosting}/${pipeName}/docker_compose.sh'
            }
            
            post {
                failure {
                    echo 'build failure'
                }
                success {
                    echo 'build success'
                    }
                }
        }

        stage('docker tag edit') {
            steps {
                sh "docker build -t ${dockerHubRegistry}:${currentBuild.number} ."
                sh "docker build -t ${dockerHubRegistry}:latest ."
            }
            post {
                failure {
                    echo 'image tag edit failure'
                }
                success {
                    echo 'image tag edit success'
                    }
                }
        }

        stage('docker image push') {
            steps {
                withDockerRegistry(credentialsId: dockerHubRegistryCredential, url: '') {
                    sh "docker push ${dockerHubRegistry}:${currentBuild.number}"
                    sh "docker push ${dockerHubRegistry}:latest"
                }
            }
            post {
                failure {
                    echo 'image push failure'
                }
                success {
                    echo 'image push success'
                    }
                }
        }

    }
}

